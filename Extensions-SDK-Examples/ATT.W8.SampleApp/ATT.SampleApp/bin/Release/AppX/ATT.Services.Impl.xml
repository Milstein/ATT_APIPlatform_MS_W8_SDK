<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ATT.Services.Impl</name>
    </assembly>
    <members>
        <member name="T:ATT.Services.Impl.AttApiService">
            <summary>
            Base class for AT&amp;T services
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.AttApiService.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates instance of <see cref="T:ATT.Services.Impl.AttApiService"/>
            </summary>
            <param name="endPoint">AT&amp;T service endpoint</param>
            <param name="apiKey">API key</param>
            <param name="secretKey">Secret key</param>
            <exception cref="T:System.ArgumentNullException">endPoint is null or apiKey is null or secretKey is null.</exception>
        </member>
        <member name="P:ATT.Services.Impl.AttApiService.Settings">
            <summary>
            Gets AT&amp;T service settings <see cref="T:ATT.WP8.SDK.Entities.AttServiceSettings"/>
            </summary>
        </member>
        <member name="T:ATT.Services.Impl.AttMmsService">
            <summary>
            Implementation of AT&amp;T MMS service.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.AttMmsService.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates instance of <see cref="T:ATT.Services.Impl.AttMmsService"/>.
            </summary>
            <param name="endPoint">Service endpoint.</param>
            <param name="apiKey">API key.</param>
            <param name="secretKey">Secret key.</param>
        </member>
        <member name="M:ATT.Services.Impl.AttMmsService.Send(ATT.Services.MmsMessage)">
            <summary>
            Sends MMS message to multiple recipients
            </summary>
            <param name="mms">MMS message to be sent.</param>
            <returns>Returns Task as a result of asynchronous operation. task result is <see cref="T:ATT.Services.MmsMessage"/> sent MMS.</returns>
            <exception cref="T:System.ArgumentNullException">mms is null.</exception>
        </member>
        <member name="M:ATT.Services.Impl.AttMmsService.GetMmsStatus(System.String)">
            <summary>
            Gets sent MMS message delivery status.
            </summary>
            <param name="mmsId">Message identifier.</param>
            <returns>Current message delivery status.</returns>
            <exception cref="T:System.ArgumentNullException">mmsId is null.</exception>
        </member>
        <member name="T:ATT.Services.Impl.AttSmsService">
            <summary>
            Implementation of AT&amp;T SMS service 
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.AttSmsService.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates instance of <see cref="T:ATT.Services.Impl.AttSmsService"/>
            </summary>
            <param name="endPoint">AT&amp;T Service endpoint.</param>
            <param name="apiKey">API key.</param>
            <param name="secretKey">Secret key.</param>
        </member>
        <member name="M:ATT.Services.Impl.AttSmsService.Send(ATT.Services.SmsMessage)">
            <summary>
            Sends SMS message to multiple recipients.
            </summary>
            <param name="sms">instance of <see cref="T:ATT.Services.SmsMessage"/> to send</param>
            <returns>SMS message sent</returns>
            <exception cref="T:System.ArgumentNullException">sms is null</exception>
        </member>
        <member name="M:ATT.Services.Impl.AttSmsService.GetSmsStatus(System.String)">
            <summary>
            Gets SMS delivery status.
            </summary>
            <param name="smsId">Id of SMS sent.</param>
            <exception cref="T:System.ArgumentNullException">smsId is null.</exception>
        </member>
        <member name="M:ATT.Services.Impl.AttSmsService.GetInboundSmsMessages(System.String)">
            <summary>
            Gets collection of inbound SMS messages sent to some short code.
            </summary>
            <param name="shortCode">Short code.</param>
            <exception cref="T:System.ArgumentNullException">shortCode is null.</exception>
        </member>
        <member name="T:ATT.Services.Impl.AttSpeechService">
            <summary>
            ATT speech service implementation.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.AttSpeechService.#ctor(System.String,System.String,System.String)">
            <summary>
            Create instance of <see cref="T:ATT.Services.Impl.AttSpeechService"/>
            </summary>
            <param name="endPoint">Service endpoint (service address)</param>
            <param name="apiKey">Api key for ATT REST services.</param>
            <param name="secretKey">User secret key.</param>
        </member>
        <member name="M:ATT.Services.Impl.AttSpeechService.Send(Windows.Storage.StorageFile)">
            <summary>
            Sends audio file to Speech service API and retrieves the recognition of call. 
            </summary>
            <param name="attachment">Audio file.</param>
            <returns>Recognition of call.</returns>
        </member>
        <member name="T:ATT.Services.Impl.AuthorizationServiceProxy">
            <summary>
            Proxy for WinRTSDK AuthorizationService event AuthorizationFailed
            </summary>
        </member>
        <member name="E:ATT.Services.Impl.AuthorizationServiceProxy.AuthorizationFailed">
            <summary>
            raise when authorization failed
            </summary>
        </member>
        <member name="T:ATT.Services.Impl.Delivery.MessageDeliveryListener">
            <summary>
            Handles message delivery status polling
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.MessageDeliveryListener.#ctor(ATT.Services.OutboundMessage,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates new instance of <see cref="T:ATT.Services.Impl.Delivery.MessageDeliveryListener"/>
            </summary>
            <param name="message">message to be listened.</param>
            <param name="pollPeriod">time interval between delivery status polls</param>
            <param name="timeout">if delivery status is not changed after this time interval then listener will stop polling</param>
            <exception cref="T:System.ArgumentNullException">message is null or pollPeriod is null or timeout is null</exception>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.MessageDeliveryListener.ListenForMessageDelivered">
            <summary>
            Starts listener by beginning to poll message delivery status.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.MessageDeliveryListener.Stop">
            <summary>
            Stops listener.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.MessageDeliveryListener.PollMessageStatus">
            <summary>
            Gets poll message status.
            </summary>
            <returns>Poll message status.</returns>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.MessageDeliveryListener.OnStatusChangeEvent(ATT.Services.Impl.WeakEvent.MessageStatusEventArgs)">
            <summary>
            Handler for _messageStatus's StatusChanged Event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:ATT.Services.Impl.Delivery.MessageDeliveryListener.StatusChangedEvent">
            <summary>
            is raised whenever an status changed
            </summary>
        </member>
        <member name="P:ATT.Services.Impl.Delivery.MessageDeliveryListener.Message">
            <summary>
            Gets message that is listened.
            </summary>
        </member>
        <member name="T:ATT.Services.Impl.Delivery.MmsDeliveryListener">
            <summary>
            Handles MMS delivery listening.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.MmsDeliveryListener.#ctor(ATT.Services.IMmsService,ATT.Services.MmsMessage,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates new instance of <see cref="T:ATT.Services.Impl.Delivery.MmsDeliveryListener"/>
            </summary>
            <param name="mmsService">Instance of <see cref="T:ATT.Services.IMmsService"/></param>
            <param name="message">MMS message listen should check delivery status for.</param>
            <param name="pollPeriod">Time interval between delivery status polls.</param>
            <param name="timeout">If delivery status is not changed after this time interval then listener will stop polling.</param>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.MmsDeliveryListener.PollMessageStatus">
            <summary>
            Gets poll message status.
            </summary>
            <returns>Poll message status.</returns>
        </member>
        <member name="T:ATT.Services.Impl.Delivery.SmsDeliveryListener">
            <summary>
            Handles SMS delivery listening.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.SmsDeliveryListener.#ctor(ATT.Services.ISmsService,ATT.Services.SmsMessage,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates new instance of <see cref="T:ATT.Services.Impl.Delivery.SmsDeliveryListener"/>
            </summary>
            <param name="smsService">Instance of <see cref="T:ATT.Services.ISmsService"/></param>
            <param name="message">SMS message listen should check delivery status for.</param>
            <param name="pollPeriod">Time interval between delivery status polls.</param>
            <param name="timeout">If delivery status is not changed after this time interval then listener will stop polling.</param>
        </member>
        <member name="M:ATT.Services.Impl.Delivery.SmsDeliveryListener.PollMessageStatus">
            <summary>
            Gets poll message status.
            </summary>
            <returns>Poll message status.</returns>
        </member>
        <member name="T:ATT.Services.Impl.FileUtils">
            <summary>
            Static class for file utils
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.FileUtils.ReadAllBytes(Windows.Storage.StorageFile)">
            <summary>
            Reads a binary file, returning a byte array.
            </summary>
            <param name="file">File to read</param>
            <returns>Returns Task as a result of asynchronous operation.
            Task result is full file content</returns>
        </member>
        <member name="T:ATT.Services.Impl.PhoneNumberIsdnFormatValidator">
            <summary>
            Used to validate phone numbers against ISDN format
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.PhoneNumberIsdnFormatValidator.Validate(System.String)">
            <summary>
            Validates phone number on ISDN format
            </summary>
            <param name="phoneNumber">phone number to validate</param>
            <returns>false if the phone number cannot be converted to ISDN format</returns>
        </member>
        <member name="M:ATT.Services.Impl.PhoneNumberIsdnFormatValidator.ConvertToIsdn(System.String)">
            <summary>
            Convert phone number to ISDN format.  Removes dashes, removes "+" from country code, etc.
            </summary>
            <param name="numberToConvert">Phone number to convert.</param>
            <returns>Converted phone number.</returns>
            <exception cref="T:System.ArgumentNullException">numberToConvert is null.</exception>
            <exception cref="T:System.ArgumentException">numberToConvert is in incorrect format</exception>
        </member>
        <member name="T:ATT.Services.Impl.PhoneNumbersUniqueValidator">
            <summary>
            Used to check collections of phone numbers for duplicates
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.PhoneNumbersUniqueValidator.Validate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates phone numbers collection to check if there are duplicated numbers
            </summary>
            <param name="phoneNumbers">phone numbers collection to validate</param>
            <returns>false if the are at least two duplicated phone number in the collection</returns>
        </member>
        <member name="T:ATT.Services.Impl.WeakEvent.MessageStatusEventArgs">
            <summary>
            EventArgs for MessageStatus
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.MessageStatusEventArgs.#ctor(ATT.Services.MessageDeliveryStatus,ATT.Services.OutboundMessage)">
            <summary>
            Creates instance of <see cref="T:ATT.Services.Impl.WeakEvent.MessageStatusEventArgs"/>
            </summary>
            <param name="status"></param>
            <param name="message"></param>
        </member>
        <member name="P:ATT.Services.Impl.WeakEvent.MessageStatusEventArgs.MessageStatus">
            <summary>
            Gets or sets message status
            </summary>
        </member>
        <member name="P:ATT.Services.Impl.WeakEvent.MessageStatusEventArgs.Message">
            <summary>
            Gets or sets original message
            </summary>
        </member>
        <member name="T:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1">
            <summary>
            Listeners are registered with weak references to their instances. This allows listeners to get garbage collected 
            if such listeners are not referenced anywhere else anymore. Invokers are pre compiled and cached.
            This class is thread safe.
            </summary>
            <example>
             public class Entity {
            	 private readonly WeakEventDispatcher&lt;<see cref="T:System.EventArgs">System.EventArgs</see>&gt; _changeNotificationDispatcher;
            
            	 public event EventHandler&lt;<see cref="T:System.EventArgs">System.EventArgs</see>&gt; DataChanged {
            		 add { _changeNotificationDispatcher += value; }
            		 remove { _changeNotificationDispatcher -= value; }
            	 }
            
            	 protected virtual void OnDataChanged(System.EventArgs e) {
            		  if(_changeNotificationDispatcher!= null)
            			 _changeNotificationDispatcher.Invoke(this, e);
            	 }
             }
            </example>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="F:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1._purgeExecuteThreshold">
            <summary>
            Threshold which determines after how many try purge calls a real purge (getting rid of garbage collected instance handlers) must be performed
            </summary>
        </member>
        <member name="F:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1._tryPurgeCounter">
            <summary>
            Counts TryPurge calls
            </summary>
        </member>
        <member name="F:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1._eventHandlers">
            <summary>
            The list of event handlers which need to be executed on each invoke
            </summary>
        </member>
        <member name="F:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1._handlerCtors">
            <summary>
            Cached invoker constructors 
            </summary>
        </member>
        <member name="F:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1._staticEventHandlers">
            <summary>
            Static event handlers are registered separately. Such handlers are not bound to an instance en do not need to be purged.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1"/> class.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1"/> class.
            </summary>
            <param name="purgeExecuteThreshold">The purge execute threshold i.e threshold which determines after how many try purge calls the real purge must be performed.</param>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.op_Addition(ATT.Services.Impl.WeakEvent.WeakEventDispatcher{`0},System.EventHandler{`0})">
            <summary>
            Implements the operator + (and +=). Use this operator to add a handler to the event dispatcher, 
            even when the dispatcher is null (as Microsoft allows as well) since the dispatcher
            is instantiated if it is null.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="handler">The handler.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.op_Subtraction(ATT.Services.Impl.WeakEvent.WeakEventDispatcher{`0},System.EventHandler{`0})">
            <summary>
            Implements the operator - (and -=) to remove a handler from the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="handler">The handler.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.Invoke(System.Object,`0)">
            <summary>
            Invokes all registered handlers.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.Purge">
            <summary>
            Cleans up all garbage collected listener handlers.
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.TryPurge">
            <summary>
            Tries to purge. It performs the purge only if it is needed again as configured by the _purgeExecuteThreshold.
            TryPurge() is invoked on each AddHandler and Invoke. On RemoveHandler a purge is performed instantly.
            </summary>
        </member>
        <member name="E:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.Event">
            <summary>
            Internal event representative.
            </summary>
        </member>
        <member name="P:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1"/> is enabled. If it is not enabled then
            any invocation will never result into any handler execution.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.InstanceHandlerCount">
            <summary>
            Gets the number of registered instance handlers. 
            Static handlers are not included.
            </summary>
        </member>
        <member name="T:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.IHandlerInvoker">
            <summary>
            This interface is a generic handler invoker interface meant to represent a compiled specific handler invoker
            </summary>
        </member>
        <member name="T:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.HandlerInvoker`1">
            <summary>
            Specific handler invoker (keeping a compiled invoker delegate inside) for any instance type and corresponding method
            </summary>
            <typeparam name="TInstance">The type of the corresponding instance.</typeparam>
        </member>
        <member name="T:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.HandlerBucket">
            <summary>
            Bucket for keeping an invoker and the corresponding weak referenced target together
            </summary>
        </member>
        <member name="M:ATT.Services.Impl.WeakEvent.WeakEventDispatcher`1.HandlerBucket.Invoke(System.Object,`0)">
            <summary>
            Invokes the included invoker if it is not garbage collected.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
    </members>
</doc>
