//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace ATT.SampleApp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace ATT.SampleApp.ATT_SampleApp_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_CopyRightControl() { return new global::ATT.SampleApp.CopyRightControl(); }

        private object Activate_1_MainPage() { return new global::ATT.SampleApp.MainPage(); }

        private object Activate_2_LayoutAwarePage() { return new global::ATT.SampleApp.Common.LayoutAwarePage(); }

        private object Activate_3_MmsControl() { return new global::ATT.Controls.MmsControl(); }

        private object Activate_7_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.Storage.StorageFile>(); }

        private object Activate_8_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.Storage.StorageFile>(); }

        private object Activate_20_MmsControlPage() { return new global::ATT.SampleApp.MmsControlPage(); }

        private object Activate_21_MmsCouponControl() { return new global::ATT.Controls.MmsCouponControl(); }

        private object Activate_22_MmsCouponControlPage() { return new global::ATT.SampleApp.MmsCouponControlPage(); }

        private object Activate_23_SmsControl() { return new global::ATT.Controls.SmsControl(); }

        private object Activate_24_SmsControlPage() { return new global::ATT.SampleApp.SmsControlPage(); }

        private object Activate_25_SmsVotingControl() { return new global::ATT.Controls.SmsVotingControl(); }

        private object Activate_27_SmsVotingControlPage() { return new global::ATT.SampleApp.SmsVotingControlPage(); }

        private object Activate_28_SpeechControl() { return new global::ATT.Controls.SpeechControl(); }

        private object Activate_29_SpeechControlPage() { return new global::ATT.SampleApp.SpeechControlPage(); }

        private void VectorAdd_7_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.Storage.StorageFile>)instance;
            var newItem = (global::Windows.Storage.StorageFile)item;
            collection.Add(newItem);
        }

        private void VectorAdd_8_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.Storage.StorageFile>)instance;
            var newItem = (global::Windows.Storage.StorageFile)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "Object":
                xamlType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Boolean":
                xamlType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Int32":
                xamlType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "ATT.SampleApp.CopyRightControl":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.SampleApp.CopyRightControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_CopyRightControl;
                xamlType = userType;
                break;

            case "ATT.SampleApp.MainPage":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.SampleApp.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_1_MainPage;
                xamlType = userType;
                break;

            case "ATT.SampleApp.Common.LayoutAwarePage":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.SampleApp.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_2_LayoutAwarePage;
                xamlType = userType;
                break;

            case "ATT.Controls.MmsControl":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Controls.MmsControl), GetXamlTypeByName("ATT.Controls.SenderControlBase"));
                userType.Activator = Activate_3_MmsControl;
                userType.AddMemberName("FileOpenButtonStyle");
                userType.AddMemberName("AttachmentFiles");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.Storage.StorageFile>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.Storage.StorageFile>");
                xamlType = userType;
                break;

            case "ATT.Controls.SenderControlBase":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Controls.SenderControlBase), GetXamlTypeByName("ATT.Controls.ControlWithPresenter"));
                userType.AddMemberName("PhoneNumberStyle");
                userType.AddMemberName("TextStyle");
                userType.AddMemberName("PhoneNumbers");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Message");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "ATT.Controls.ControlWithPresenter":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Controls.ControlWithPresenter), GetXamlTypeByName("ATT.Controls.AttControl"));
                xamlType = userType;
                break;

            case "ATT.Controls.AttControl":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Controls.AttControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("Endpoint");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ApiKey");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SecretKey");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Windows.Storage.StorageFile>":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.Storage.StorageFile>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Windows.Storage.StorageFile>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.Storage.StorageFile>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.Storage.StorageFile>");
                userType.Activator = Activate_7_ObservableCollection;
                userType.CollectionAdd = VectorAdd_7_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Windows.Storage.StorageFile>":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Windows.Storage.StorageFile>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Windows.Storage.StorageFile>),
                                                   "System.Collections.ObjectModel.Collection<Windows.Storage.StorageFile>");
                userType.Activator = Activate_8_Collection;
                userType.CollectionAdd = VectorAdd_8_Collection;
                xamlType = userType;
                break;

            case "Windows.Storage.StorageFile":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Storage.StorageFile), GetXamlTypeByName("Object"));
                userType.AddMemberName("ContentType");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("FileType");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Attributes");
                userType.AddMemberName("DateCreated");
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Path");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DisplayName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DisplayType");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("FolderRelativeId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Properties");
                userType.AddMemberName("FileFromPathAsync");
                AddToMapOfTypeToStandardName(typeof(global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile>),
                                                   "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile>");
                userType.AddMemberName("FileFromApplicationUriAsync");
                AddToMapOfTypeToStandardName(typeof(global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile>),
                                                   "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile>");
                xamlType = userType;
                break;

            case "Windows.Storage.FileAttributes":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Storage.FileAttributes), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.Storage.FileAttributes.Normal);
                userType.AddEnumValue("ReadOnly", global::Windows.Storage.FileAttributes.ReadOnly);
                userType.AddEnumValue("Directory", global::Windows.Storage.FileAttributes.Directory);
                userType.AddEnumValue("Archive", global::Windows.Storage.FileAttributes.Archive);
                userType.AddEnumValue("Temporary", global::Windows.Storage.FileAttributes.Temporary);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "System.DateTimeOffset":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.DateTimeOffset), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "Windows.Storage.FileProperties.StorageItemContentProperties":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Storage.FileProperties.StorageItemContentProperties), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile>":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile>), null);
                AddToMapOfTypeToStandardName(typeof(global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFile>),
                                                   "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile>");
                xamlType = userType;
                break;

            case "System.Uri":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Uri), GetXamlTypeByName("Object"));
                userType.AddMemberName("AbsolutePath");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AbsoluteUri");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Authority");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DnsSafeHost");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Fragment");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Host");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("HostNameType");
                userType.AddMemberName("IsAbsoluteUri");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsDefaultPort");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFile");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsLoopback");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsUnc");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("LocalPath");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("OriginalString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PathAndQuery");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Port");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Query");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Scheme");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Segments");
                AddToMapOfTypeToStandardName(typeof(global::System.String[]),
                                                   "String[]");
                userType.AddMemberName("UserEscaped");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("UserInfo");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.UriHostNameType":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.UriHostNameType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unknown", global::System.UriHostNameType.Unknown);
                userType.AddEnumValue("Basic", global::System.UriHostNameType.Basic);
                userType.AddEnumValue("Dns", global::System.UriHostNameType.Dns);
                userType.AddEnumValue("IPv4", global::System.UriHostNameType.IPv4);
                userType.AddEnumValue("IPv6", global::System.UriHostNameType.IPv6);
                xamlType = userType;
                break;

            case "String[]":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.String[]), GetXamlTypeByName("System.Array"));
                AddToMapOfTypeToStandardName(typeof(global::System.String[]),
                                                   "String[]");
                xamlType = userType;
                break;

            case "System.Array":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Array), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "ATT.SampleApp.MmsControlPage":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.SampleApp.MmsControlPage), GetXamlTypeByName("ATT.SampleApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_20_MmsControlPage;
                xamlType = userType;
                break;

            case "ATT.Controls.MmsCouponControl":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Controls.MmsCouponControl), GetXamlTypeByName("ATT.Controls.SenderControlBase"));
                userType.Activator = Activate_21_MmsCouponControl;
                userType.AddMemberName("FileOpenButtonStyle");
                userType.AddMemberName("File");
                xamlType = userType;
                break;

            case "ATT.SampleApp.MmsCouponControlPage":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.SampleApp.MmsCouponControlPage), GetXamlTypeByName("ATT.SampleApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_22_MmsCouponControlPage;
                xamlType = userType;
                break;

            case "ATT.Controls.SmsControl":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Controls.SmsControl), GetXamlTypeByName("ATT.Controls.SenderControlBase"));
                userType.Activator = Activate_23_SmsControl;
                userType.AddMemberName("MaxSmsLength");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "ATT.SampleApp.SmsControlPage":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.SampleApp.SmsControlPage), GetXamlTypeByName("ATT.SampleApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_24_SmsControlPage;
                xamlType = userType;
                break;

            case "ATT.Controls.SmsVotingControl":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Controls.SmsVotingControl), GetXamlTypeByName("ATT.Controls.ControlWithPresenter"));
                userType.Activator = Activate_25_SmsVotingControl;
                userType.AddMemberName("SmsVotingStorage");
                userType.AddMemberName("SmsShortCode");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "ATT.Services.ISmsVotingStorage":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Services.ISmsVotingStorage), null);
                xamlType = userType;
                break;

            case "ATT.SampleApp.SmsVotingControlPage":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.SampleApp.SmsVotingControlPage), GetXamlTypeByName("ATT.SampleApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_27_SmsVotingControlPage;
                xamlType = userType;
                break;

            case "ATT.Controls.SpeechControl":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.Controls.SpeechControl), GetXamlTypeByName("ATT.Controls.ControlWithPresenter"));
                userType.Activator = Activate_28_SpeechControl;
                userType.AddMemberName("FileOpenPathStyle");
                userType.AddMemberName("FileOpenButtonStyle");
                userType.AddMemberName("TranscriptTextStyle");
                userType.AddMemberName("File");
                userType.AddMemberName("TranscriptMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsNewMessageEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "ATT.SampleApp.SpeechControlPage":
                userType = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::ATT.SampleApp.SpeechControlPage), GetXamlTypeByName("ATT.SampleApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_29_SpeechControlPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::ATT.Controls.ATT_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_MmsControl_FileOpenButtonStyle(object instance)
        {
            var that = (global::ATT.Controls.MmsControl)instance;
            return that.FileOpenButtonStyle;
        }
        private void set_0_MmsControl_FileOpenButtonStyle(object instance, object Value)
        {
            var that = (global::ATT.Controls.MmsControl)instance;
            that.FileOpenButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_1_MmsControl_AttachmentFiles(object instance)
        {
            var that = (global::ATT.Controls.MmsControl)instance;
            return that.AttachmentFiles;
        }
        private void set_1_MmsControl_AttachmentFiles(object instance, object Value)
        {
            var that = (global::ATT.Controls.MmsControl)instance;
            that.AttachmentFiles = (global::System.Collections.ObjectModel.ObservableCollection<global::Windows.Storage.StorageFile>)Value;
        }
        private object get_2_StorageFile_ContentType(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.ContentType;
        }
        private object get_3_StorageFile_FileType(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.FileType;
        }
        private object get_4_StorageFile_Attributes(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.Attributes;
        }
        private object get_5_StorageFile_DateCreated(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.DateCreated;
        }
        private object get_6_StorageFile_Name(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.Name;
        }
        private object get_7_StorageFile_Path(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.Path;
        }
        private object get_8_StorageFile_DisplayName(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.DisplayName;
        }
        private object get_9_StorageFile_DisplayType(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.DisplayType;
        }
        private object get_10_StorageFile_FolderRelativeId(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.FolderRelativeId;
        }
        private object get_11_StorageFile_Properties(object instance)
        {
            var that = (global::Windows.Storage.StorageFile)instance;
            return that.Properties;
        }
        private object get_12_StorageFile_FileFromPathAsync(object instance)
        {
            return global::Windows.Storage.StorageFile.GetFileFromPathAsync((global::System.String)instance);
        }
        private object get_13_StorageFile_FileFromApplicationUriAsync(object instance)
        {
            return global::Windows.Storage.StorageFile.GetFileFromApplicationUriAsync((global::System.Uri)instance);
        }
        private object get_14_Uri_AbsolutePath(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.AbsolutePath;
        }
        private object get_15_Uri_AbsoluteUri(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.AbsoluteUri;
        }
        private object get_16_Uri_Authority(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.Authority;
        }
        private object get_17_Uri_DnsSafeHost(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.DnsSafeHost;
        }
        private object get_18_Uri_Fragment(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.Fragment;
        }
        private object get_19_Uri_Host(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.Host;
        }
        private object get_20_Uri_HostNameType(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.HostNameType;
        }
        private object get_21_Uri_IsAbsoluteUri(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.IsAbsoluteUri;
        }
        private object get_22_Uri_IsDefaultPort(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.IsDefaultPort;
        }
        private object get_23_Uri_IsFile(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.IsFile;
        }
        private object get_24_Uri_IsLoopback(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.IsLoopback;
        }
        private object get_25_Uri_IsUnc(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.IsUnc;
        }
        private object get_26_Uri_LocalPath(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.LocalPath;
        }
        private object get_27_Uri_OriginalString(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.OriginalString;
        }
        private object get_28_Uri_PathAndQuery(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.PathAndQuery;
        }
        private object get_29_Uri_Port(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.Port;
        }
        private object get_30_Uri_Query(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.Query;
        }
        private object get_31_Uri_Scheme(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.Scheme;
        }
        private object get_32_Uri_Segments(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.Segments;
        }
        private object get_33_Uri_UserEscaped(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.UserEscaped;
        }
        private object get_34_Uri_UserInfo(object instance)
        {
            var that = (global::System.Uri)instance;
            return that.UserInfo;
        }
        private object get_35_SenderControlBase_PhoneNumberStyle(object instance)
        {
            var that = (global::ATT.Controls.SenderControlBase)instance;
            return that.PhoneNumberStyle;
        }
        private void set_35_SenderControlBase_PhoneNumberStyle(object instance, object Value)
        {
            var that = (global::ATT.Controls.SenderControlBase)instance;
            that.PhoneNumberStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_36_SenderControlBase_TextStyle(object instance)
        {
            var that = (global::ATT.Controls.SenderControlBase)instance;
            return that.TextStyle;
        }
        private void set_36_SenderControlBase_TextStyle(object instance, object Value)
        {
            var that = (global::ATT.Controls.SenderControlBase)instance;
            that.TextStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_37_SenderControlBase_PhoneNumbers(object instance)
        {
            var that = (global::ATT.Controls.SenderControlBase)instance;
            return that.PhoneNumbers;
        }
        private void set_37_SenderControlBase_PhoneNumbers(object instance, object Value)
        {
            var that = (global::ATT.Controls.SenderControlBase)instance;
            that.PhoneNumbers = (global::System.String)Value;
        }
        private object get_38_SenderControlBase_Message(object instance)
        {
            var that = (global::ATT.Controls.SenderControlBase)instance;
            return that.Message;
        }
        private void set_38_SenderControlBase_Message(object instance, object Value)
        {
            var that = (global::ATT.Controls.SenderControlBase)instance;
            that.Message = (global::System.String)Value;
        }
        private object get_39_AttControl_Endpoint(object instance)
        {
            var that = (global::ATT.Controls.AttControl)instance;
            return that.Endpoint;
        }
        private void set_39_AttControl_Endpoint(object instance, object Value)
        {
            var that = (global::ATT.Controls.AttControl)instance;
            that.Endpoint = (global::System.String)Value;
        }
        private object get_40_AttControl_ApiKey(object instance)
        {
            var that = (global::ATT.Controls.AttControl)instance;
            return that.ApiKey;
        }
        private void set_40_AttControl_ApiKey(object instance, object Value)
        {
            var that = (global::ATT.Controls.AttControl)instance;
            that.ApiKey = (global::System.String)Value;
        }
        private object get_41_AttControl_SecretKey(object instance)
        {
            var that = (global::ATT.Controls.AttControl)instance;
            return that.SecretKey;
        }
        private void set_41_AttControl_SecretKey(object instance, object Value)
        {
            var that = (global::ATT.Controls.AttControl)instance;
            that.SecretKey = (global::System.String)Value;
        }
        private object get_42_MmsCouponControl_FileOpenButtonStyle(object instance)
        {
            var that = (global::ATT.Controls.MmsCouponControl)instance;
            return that.FileOpenButtonStyle;
        }
        private void set_42_MmsCouponControl_FileOpenButtonStyle(object instance, object Value)
        {
            var that = (global::ATT.Controls.MmsCouponControl)instance;
            that.FileOpenButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_43_MmsCouponControl_File(object instance)
        {
            var that = (global::ATT.Controls.MmsCouponControl)instance;
            return that.File;
        }
        private void set_43_MmsCouponControl_File(object instance, object Value)
        {
            var that = (global::ATT.Controls.MmsCouponControl)instance;
            that.File = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_44_SmsControl_MaxSmsLength(object instance)
        {
            var that = (global::ATT.Controls.SmsControl)instance;
            return that.MaxSmsLength;
        }
        private void set_44_SmsControl_MaxSmsLength(object instance, object Value)
        {
            var that = (global::ATT.Controls.SmsControl)instance;
            that.MaxSmsLength = (global::System.Int32)Value;
        }
        private object get_45_SmsVotingControl_SmsVotingStorage(object instance)
        {
            var that = (global::ATT.Controls.SmsVotingControl)instance;
            return that.SmsVotingStorage;
        }
        private void set_45_SmsVotingControl_SmsVotingStorage(object instance, object Value)
        {
            var that = (global::ATT.Controls.SmsVotingControl)instance;
            that.SmsVotingStorage = (global::ATT.Services.ISmsVotingStorage)Value;
        }
        private object get_46_SmsVotingControl_SmsShortCode(object instance)
        {
            var that = (global::ATT.Controls.SmsVotingControl)instance;
            return that.SmsShortCode;
        }
        private void set_46_SmsVotingControl_SmsShortCode(object instance, object Value)
        {
            var that = (global::ATT.Controls.SmsVotingControl)instance;
            that.SmsShortCode = (global::System.String)Value;
        }
        private object get_47_SpeechControl_FileOpenPathStyle(object instance)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            return that.FileOpenPathStyle;
        }
        private void set_47_SpeechControl_FileOpenPathStyle(object instance, object Value)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            that.FileOpenPathStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_48_SpeechControl_FileOpenButtonStyle(object instance)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            return that.FileOpenButtonStyle;
        }
        private void set_48_SpeechControl_FileOpenButtonStyle(object instance, object Value)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            that.FileOpenButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_49_SpeechControl_TranscriptTextStyle(object instance)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            return that.TranscriptTextStyle;
        }
        private void set_49_SpeechControl_TranscriptTextStyle(object instance, object Value)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            that.TranscriptTextStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_50_SpeechControl_File(object instance)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            return that.File;
        }
        private void set_50_SpeechControl_File(object instance, object Value)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            that.File = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_51_SpeechControl_TranscriptMessage(object instance)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            return that.TranscriptMessage;
        }
        private object get_52_SpeechControl_ErrorMessage(object instance)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            return that.ErrorMessage;
        }
        private object get_53_SpeechControl_IsNewMessageEnabled(object instance)
        {
            var that = (global::ATT.Controls.SpeechControl)instance;
            return that.IsNewMessageEnabled;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember xamlMember = null;
            global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "ATT.Controls.MmsControl.FileOpenButtonStyle":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.MmsControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "FileOpenButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_MmsControl_FileOpenButtonStyle;
                xamlMember.Setter = set_0_MmsControl_FileOpenButtonStyle;
                break;
            case "ATT.Controls.MmsControl.AttachmentFiles":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.MmsControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "AttachmentFiles", "System.Collections.ObjectModel.ObservableCollection<Windows.Storage.StorageFile>");
                xamlMember.Getter = get_1_MmsControl_AttachmentFiles;
                xamlMember.Setter = set_1_MmsControl_AttachmentFiles;
                break;
            case "Windows.Storage.StorageFile.ContentType":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "ContentType", "String");
                xamlMember.Getter = get_2_StorageFile_ContentType;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.FileType":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "FileType", "String");
                xamlMember.Getter = get_3_StorageFile_FileType;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.Attributes":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Attributes", "Windows.Storage.FileAttributes");
                xamlMember.Getter = get_4_StorageFile_Attributes;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.DateCreated":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "DateCreated", "System.DateTimeOffset");
                xamlMember.Getter = get_5_StorageFile_DateCreated;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.Name":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_6_StorageFile_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.Path":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Path", "String");
                xamlMember.Getter = get_7_StorageFile_Path;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.DisplayName":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.Getter = get_8_StorageFile_DisplayName;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.DisplayType":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "DisplayType", "String");
                xamlMember.Getter = get_9_StorageFile_DisplayType;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.FolderRelativeId":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "FolderRelativeId", "String");
                xamlMember.Getter = get_10_StorageFile_FolderRelativeId;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.Properties":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Properties", "Windows.Storage.FileProperties.StorageItemContentProperties");
                xamlMember.Getter = get_11_StorageFile_Properties;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.FileFromPathAsync":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "FileFromPathAsync", "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile>");
                xamlMember.SetTargetTypeName("String");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_12_StorageFile_FileFromPathAsync;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.Storage.StorageFile.FileFromApplicationUriAsync":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.Storage.StorageFile");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "FileFromApplicationUriAsync", "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile>");
                xamlMember.SetTargetTypeName("System.Uri");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_13_StorageFile_FileFromApplicationUriAsync;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.AbsolutePath":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "AbsolutePath", "String");
                xamlMember.Getter = get_14_Uri_AbsolutePath;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.AbsoluteUri":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "AbsoluteUri", "String");
                xamlMember.Getter = get_15_Uri_AbsoluteUri;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.Authority":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Authority", "String");
                xamlMember.Getter = get_16_Uri_Authority;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.DnsSafeHost":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "DnsSafeHost", "String");
                xamlMember.Getter = get_17_Uri_DnsSafeHost;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.Fragment":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Fragment", "String");
                xamlMember.Getter = get_18_Uri_Fragment;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.Host":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Host", "String");
                xamlMember.Getter = get_19_Uri_Host;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.HostNameType":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "HostNameType", "System.UriHostNameType");
                xamlMember.Getter = get_20_Uri_HostNameType;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.IsAbsoluteUri":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "IsAbsoluteUri", "Boolean");
                xamlMember.Getter = get_21_Uri_IsAbsoluteUri;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.IsDefaultPort":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "IsDefaultPort", "Boolean");
                xamlMember.Getter = get_22_Uri_IsDefaultPort;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.IsFile":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "IsFile", "Boolean");
                xamlMember.Getter = get_23_Uri_IsFile;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.IsLoopback":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "IsLoopback", "Boolean");
                xamlMember.Getter = get_24_Uri_IsLoopback;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.IsUnc":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "IsUnc", "Boolean");
                xamlMember.Getter = get_25_Uri_IsUnc;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.LocalPath":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "LocalPath", "String");
                xamlMember.Getter = get_26_Uri_LocalPath;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.OriginalString":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "OriginalString", "String");
                xamlMember.Getter = get_27_Uri_OriginalString;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.PathAndQuery":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "PathAndQuery", "String");
                xamlMember.Getter = get_28_Uri_PathAndQuery;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.Port":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Port", "Int32");
                xamlMember.Getter = get_29_Uri_Port;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.Query":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Query", "String");
                xamlMember.Getter = get_30_Uri_Query;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.Scheme":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Scheme", "String");
                xamlMember.Getter = get_31_Uri_Scheme;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.Segments":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Segments", "String[]");
                xamlMember.Getter = get_32_Uri_Segments;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.UserEscaped":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "UserEscaped", "Boolean");
                xamlMember.Getter = get_33_Uri_UserEscaped;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Uri.UserInfo":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Uri");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "UserInfo", "String");
                xamlMember.Getter = get_34_Uri_UserInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "ATT.Controls.SenderControlBase.PhoneNumberStyle":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SenderControlBase");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "PhoneNumberStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_SenderControlBase_PhoneNumberStyle;
                xamlMember.Setter = set_35_SenderControlBase_PhoneNumberStyle;
                break;
            case "ATT.Controls.SenderControlBase.TextStyle":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SenderControlBase");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "TextStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_SenderControlBase_TextStyle;
                xamlMember.Setter = set_36_SenderControlBase_TextStyle;
                break;
            case "ATT.Controls.SenderControlBase.PhoneNumbers":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SenderControlBase");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "PhoneNumbers", "String");
                xamlMember.Getter = get_37_SenderControlBase_PhoneNumbers;
                xamlMember.Setter = set_37_SenderControlBase_PhoneNumbers;
                break;
            case "ATT.Controls.SenderControlBase.Message":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SenderControlBase");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Message", "String");
                xamlMember.Getter = get_38_SenderControlBase_Message;
                xamlMember.Setter = set_38_SenderControlBase_Message;
                break;
            case "ATT.Controls.AttControl.Endpoint":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.AttControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "Endpoint", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_AttControl_Endpoint;
                xamlMember.Setter = set_39_AttControl_Endpoint;
                break;
            case "ATT.Controls.AttControl.ApiKey":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.AttControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "ApiKey", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_AttControl_ApiKey;
                xamlMember.Setter = set_40_AttControl_ApiKey;
                break;
            case "ATT.Controls.AttControl.SecretKey":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.AttControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "SecretKey", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_AttControl_SecretKey;
                xamlMember.Setter = set_41_AttControl_SecretKey;
                break;
            case "ATT.Controls.MmsCouponControl.FileOpenButtonStyle":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.MmsCouponControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "FileOpenButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_MmsCouponControl_FileOpenButtonStyle;
                xamlMember.Setter = set_42_MmsCouponControl_FileOpenButtonStyle;
                break;
            case "ATT.Controls.MmsCouponControl.File":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.MmsCouponControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "File", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_43_MmsCouponControl_File;
                xamlMember.Setter = set_43_MmsCouponControl_File;
                break;
            case "ATT.Controls.SmsControl.MaxSmsLength":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SmsControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "MaxSmsLength", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_SmsControl_MaxSmsLength;
                xamlMember.Setter = set_44_SmsControl_MaxSmsLength;
                break;
            case "ATT.Controls.SmsVotingControl.SmsVotingStorage":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SmsVotingControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "SmsVotingStorage", "ATT.Services.ISmsVotingStorage");
                xamlMember.Getter = get_45_SmsVotingControl_SmsVotingStorage;
                xamlMember.Setter = set_45_SmsVotingControl_SmsVotingStorage;
                break;
            case "ATT.Controls.SmsVotingControl.SmsShortCode":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SmsVotingControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "SmsShortCode", "String");
                xamlMember.Getter = get_46_SmsVotingControl_SmsShortCode;
                xamlMember.Setter = set_46_SmsVotingControl_SmsShortCode;
                break;
            case "ATT.Controls.SpeechControl.FileOpenPathStyle":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SpeechControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "FileOpenPathStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_SpeechControl_FileOpenPathStyle;
                xamlMember.Setter = set_47_SpeechControl_FileOpenPathStyle;
                break;
            case "ATT.Controls.SpeechControl.FileOpenButtonStyle":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SpeechControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "FileOpenButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_SpeechControl_FileOpenButtonStyle;
                xamlMember.Setter = set_48_SpeechControl_FileOpenButtonStyle;
                break;
            case "ATT.Controls.SpeechControl.TranscriptTextStyle":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SpeechControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "TranscriptTextStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_SpeechControl_TranscriptTextStyle;
                xamlMember.Setter = set_49_SpeechControl_TranscriptTextStyle;
                break;
            case "ATT.Controls.SpeechControl.File":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SpeechControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "File", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_50_SpeechControl_File;
                xamlMember.Setter = set_50_SpeechControl_File;
                break;
            case "ATT.Controls.SpeechControl.TranscriptMessage":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SpeechControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "TranscriptMessage", "String");
                xamlMember.Getter = get_51_SpeechControl_TranscriptMessage;
                xamlMember.SetIsReadOnly();
                break;
            case "ATT.Controls.SpeechControl.ErrorMessage":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SpeechControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "ErrorMessage", "String");
                xamlMember.Getter = get_52_SpeechControl_ErrorMessage;
                xamlMember.SetIsReadOnly();
                break;
            case "ATT.Controls.SpeechControl.IsNewMessageEnabled":
                userType = (global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ATT.Controls.SpeechControl");
                xamlMember = new global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlMember(this, "IsNewMessageEnabled", "Boolean");
                xamlMember.Getter = get_53_SpeechControl_IsNewMessageEnabled;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlSystemBaseType
    {
        global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ATT.SampleApp.ATT_SampleApp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


